#!/bin/bash/

API_BASE_URL="https://pokeapi.co/api/v2/pokemon/"
OUTPUT_DIR="pokemon_data"
REQUEST_DELAY=6
MAX_RETRIES=3
ERROR_LOG="pokemon_errors.txt"

POKEMON_LIST=[Bulbasaur, Ivysaur, Venusaur, Charmander, Charmeleon]

log_error() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$ERROR_LOG"
    echo "Error: $1"
}

#function to validate pokemon name
validate_pokemon_name() {
    local name="$1"
    if [[ ! "$name" =~ ^[A-Za-z]+$ ]]; then
        log_error "Invalid Pokemon name: $name"
        return 1
    fi
    return 0
}

fetch_pokemon_data() {
    local pokemon_name="$1"
    local url="${API_BASE_URL}${pokemon_name}/"
    local output_file="${OUTPUT_DIR}/${pokemon_name}.json"

    mkdir -p "$OUTPUT_DIR"

    for ((i=1; i<=MAX_RETRIES; i++)); do
        curl -s "$url" -o "$output_file"
        if [ $? -eq 0 ]; then
            echo "Successfully fetched data for $pokemon_name"
            return 0
        else
            log_error "Attempt $i: Failed to fetch data for $pokemon_name"
            sleep $REQUEST_DELAY
        fi
    done

    log_error "Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts"
    return 1
}

for pokemon in "${POKEMON_LIST[@]}"; do
    if validate_pokemon_name "$pokemon"; then
        fetch_pokemon_data "$pokemon"
    else
        log_error "Skipping invalid Pokemon name: $pokemon"
    fi
done

if [ ! -s "$OUTPUT_FILE" ]; then
    echo "Error: No data fetched from API or file is empty" >> "$ERROR_FILE"
    exit 1
fi

echo "Data successfully fetched and saved to $OUTPUT_DIR""$OUTPUT_FILE"
